version: "3.8"

# For consistent database data
volumes:
  mysql_bnb_data:
  mysql_reservation_data:
  mongodb_person_data:

# We use a bridge network so that our microservices can communicate with each other through the service names assigned in this compose file
networks:
  microservices_network:
    driver: bridge

services:
  # Databases

  mysql-bnb:
    image: mysql:latest
    restart: on-failure
    environment:
      MYSQL_DATABASE: bnbdb
      MYSQL_ROOT_PASSWORD: abc123
    networks:
      - microservices_network
    # volumes:
    #   - mysql_bnb_data:/var/lib/mysql

  mysql-reservation:
    image: mysql:latest
    restart: on-failure
    environment:
      MYSQL_DATABASE: reservationdb
      MYSQL_ROOT_PASSWORD: abc123
    networks:
      - microservices_network
    # volumes:
    #   - mysql_reservation_data:/var/lib/mysql

  mongo-person:
    image: mongo:latest
    restart: on-failure
    environment:
      MONGO_INITDB_DATABASE: mongo-person
    networks:
      - microservices_network
    # volumes:
    #   - mongodb_person_data:/data/db

  # Database's volumes are in comment until we deploy
  # Database ports are in comment because the services use the internal microservices_network network to connect to eachother

  # ----------------------------------------------------------------
  # Rest APIs

  # The comments for the APIs will be on the first 2 API's (Since the latter 2 APIs are identical to the first 2.)

  bnb-service:
    # Depends on the database being deployed
    depends_on:
      - mysql-bnb
    image: brentbrentbrent/bnb-service:latest
    ports:
      - 8080:8080
    # Restart on failure is necesarry incase the api crashes on start due to the database not being initialized, and ofcourse incase the api crashes
    restart: on-failure
    environment:
      # host url (since we use a proper docker network this is the database's service name and not localhost.)
      MYSQL_DB_HOST: mysql-bnb
      MYSQL_DB_PORT: 3306
      # Login credentials database
      MYSQL_DB_USERNAME: root
      MYSQL_DB_PASSWORD: abc123
      # Name of the database scheme
      MYSQL_DB_NAME: bnbdb
    networks:
      - microservices_network

  person-service:
    depends_on:
      - mongo-person
    image: brentbrentbrent/person-service:latest
    ports:
      - 8095:8080
    restart: on-failure
    environment:
      # Person service uses mongo db, this doesnt require any credentials.
      MONGODB_HOST: mongo-person
      MONGODB_PORT: 27017
      # Database name:
      MONGODB_NAME: mongo-person
    networks:
      - microservices_network

  reservation-service:
    depends_on:
      - mysql-reservation
    image: brentbrentbrent/reservation-service:latest
    ports:
      - 8090:8080
    restart: on-failure
    environment:
      MYSQL_DB_HOST: mysql-reservation
      MYSQL_DB_PORT: 3306
      MYSQL_DB_USERNAME: root
      MYSQL_DB_PASSWORD: abc123
      MYSQL_DB_NAME: reservationdb
    networks:
      - microservices_network

  api-gateway:
    depends_on:
      - bnb-service
      - person-service
      - reservation-service
    image: brentbrentbrent/api-gateway:latest
    ports:
      - 7000:7000
    restart: on-failure
    environment:
      BNB_SERVICE_BASEURL: bnb-service:8080
      PERSON_SERVICE_BASEURL: person-service:8080
      RESERVATION_SERVICE_BASEURL: reservation-service:8080
    networks:
      - microservices_network
