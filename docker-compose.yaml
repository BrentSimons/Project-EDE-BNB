version: "3.8"

# For consistent database data
volumes:
  mysql_bnb_data:
  mysql_reservation_data:
  mongodb_person_data:
  mongodb_room_data:

    # We use a bridge network so that our microservices can communicate with each other through the service names assigned in this compose file

services:
  redis:
    image: redis:latest


  # Databases
  mysql-bnb:
    image: mysql:latest
    restart: on-failure
    environment:
      MYSQL_DATABASE: bnbdb
      MYSQL_ROOT_PASSWORD: abc123
    volumes:
       - mysql_bnb_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 20s
      retries: 10

  mysql-reservation:
    image: mysql:latest
    restart: on-failure
    environment:
      MYSQL_DATABASE: reservationdb
      MYSQL_ROOT_PASSWORD: abc123
    volumes:
       - mysql_reservation_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 20s
      retries: 10

  mongo-person:
    image: mongo:latest
    restart: on-failure
    environment:
      MONGO_INITDB_DATABASE: mongo-person
    volumes:
       - mongodb_person_data:/data/db

  mongo-room:
    image: mongo:latest
    restart: on-failure
    environment:
      MONGO_INITDB_DATABASE: mongo-room
    volumes:
       - mongodb_room_data:/data/db



    # ----------------------------------------------------------------
    # Rest APIs

    # The comments for the APIs will be on the first 2 API's (Since the latter 2 APIs are identical to the first 2.)

    # Note for all services: ports are opened in each service but since were using an api gateway these will be removed in the final project

  bnb-service:
    # Depends on the database being deployed (and in the mysql database cases also the container being healthy)
    depends_on:
      mysql-bnb:
        condition: service_healthy
    image: brentbrentbrent/bnb-service:latest
    # Restart on failure is necessary in case the api crashes on start due to the database not being initialized, and of course in case the api crashes
    restart: on-failure
    environment:
      # host url (since we use a proper docker network this is the database's service name and not localhost.)
      MYSQL_DB_HOST: mysql-bnb
      MYSQL_DB_PORT: 3306
      # Login credentials database
      MYSQL_DB_USERNAME: root
      MYSQL_DB_PASSWORD: abc123
      # Name of the database scheme
      MYSQL_DB_NAME: bnbdb
      ROOM_SERVICE_BASEURL: room-service:8080

  person-service:
    depends_on:
      - mongo-person
    image: brentbrentbrent/person-service:latest
    restart: on-failure
    environment:
      # Person service uses mongodb, this doesn't require any credentials.
      MONGODB_HOST: mongo-person
      MONGODB_PORT: 27017
      # Database name:
      MONGODB_NAME: mongo-person

  reservation-service:
    depends_on:
      mysql-reservation:
        condition: service_healthy
    image: brentbrentbrent/reservation-service:latest
    restart: on-failure
    environment:
      MYSQL_DB_HOST: mysql-reservation
      MYSQL_DB_PORT: 3306
      MYSQL_DB_USERNAME: root
      MYSQL_DB_PASSWORD: abc123
      MYSQL_DB_NAME: reservationdb

  room-service:
    depends_on:
      - mongo-room
    image: brentbrentbrent/room-service:latest
    restart: on-failure
    environment:
      # Person service uses mongodb, this doesn't require any credentials.
      MONGODB_HOST: mongo-room
      MONGODB_PORT: 27017
      # Database name:
      MONGODB_NAME: mongo-room
      # Other service URLs
      BNB_SERVICE_BASEURL: bnb-service:8080
      RESERVATION_SERVICE_BASEURL: reservation-service:8080

  api-gateway:
    depends_on:
      - bnb-service
      - person-service
      - reservation-service
      - room-service
      - redis
    image: brentbrentbrent/api-gateway:latest
    ports:
      - "7000:7000"
    restart: on-failure
    environment:
      # Due to the microservices_network the gateway can connect to each api separately, and since each api is viewed as its own machine we can re-use the default 8080 port
      BNB_SERVICE_BASEURL: bnb-service:8080
      PERSON_SERVICE_BASEURL: person-service:8080
      RESERVATION_SERVICE_BASEURL: reservation-service:8080
      ROOM_SERVICE_BASEURL: room-service:8080
